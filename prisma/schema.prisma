// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum MessageStatus {
  SENT
  DELIVERED
  SEEN
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  category    Category @relation(fields: [categoryId], references: [id])
  size        String
  duration    String
  experience  String
  location    String   @default("Remote")
  minPrice    Int
  maxPrice    Int
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  skills      Skill[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@index([visible, createdAt(sort: Desc)])
  @@map("jobs")
}

model Category {
  id         String       @id @default(uuid())
  name       String       @unique
  priority   Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  jobs       Job[]
  skills     Skill[]
  freelancer Freelancer[]

  @@map("categories")
}

model Skill {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  category   Category[]
  Jobs       Job[]
  Freelancer Freelancer[]

  @@map("skills")
}

model User {
  id           String        @id @default(uuid())
  email        String?       @unique
  name         String?
  username     String?       @unique
  description  String?
  role         Role          @default(USER)
  visible      Boolean       @default(true)
  avatar       String?
  ip           String?
  country      String?
  region       String?
  city         String?
  isFreelancer Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  wallets      UserWallet[]
  chats        ChatRoom[]    @relation("user_chats")
  messages     ChatMessage[]
  freelancer   Freelancer?
  jobs         Job[]

  @@map("users")
}

model UserWallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  address   String
  chainId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_wallets")
}

model Freelancer {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  description String?
  skills      Skill[]
  category    Category? @relation(fields: [categoryId], references: [id])
  isComplete  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String?

  @@index([userId])
  @@map("freelancers")
}

model ChatRoom {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  users     User[]        @relation("user_chats")
  messages  ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id         String        @id @default(uuid())
  content    String
  type       String        @default("text")
  createdAt  DateTime      @default(now())
  senderId   String
  chatRoomId String
  status     MessageStatus @default(SENT)
  sender     User          @relation(fields: [senderId], references: [id])
  chatRoom   ChatRoom      @relation(fields: [chatRoomId], references: [id])

  @@map("chat_messages")
}
